from scipy import *
from numpy import *
from scipy import linalg

#==================Plank's prior matrix  from DETF=====================================================================
Planks_prior = array([[1.99579245e+05,  -3.73667528e+04, -1.04936812e+04 ,  1.39977603e+06  ,  5.58643962e+05 , -4.64225267e+04 , -7.65181989e+04 , -2.23806234e+03],
                    [-3.73667528e+04,   1.83928663e+05,   5.16525685e+04 , -7.42050738e+06  , -3.98758357e+06 , -1.11710442e+06 ,  1.32438370e+06 , -4.51559188e+02],
                    [-1.04936812e+04,   5.16525685e+04,   1.45055577e+04 , -2.08389634e+06  , -1.11983054e+06 , -3.13715719e+05 ,  3.71925825e+05 , -1.26811078e+02],
                    [1.39977603e+06,  -7.42050738e+06 ,  -2.08389634e+06 ,  3.64943809e+08  ,  1.58599621e+08 ,  4.25932543e+07 , -5.16878541e+07 ,  3.20338905e+04],
                    [5.58643962e+05,  -3.98758357e+06 ,  -1.11983054e+06 ,  1.58599621e+08  ,  8.70535526e+07 ,  2.48738854e+07 , -2.91740427e+07 ,  1.88438127e+04],
                    [-4.64225267e+04,  -1.11710442e+06,  -3.13715719e+05 ,  4.25932543e+07  ,  2.48738854e+07 ,  7.49686718e+06 , -8.54525588e+06 ,  1.25851649e+04],
                    [-7.65181989e+04,   1.32438370e+06,   3.71925825e+05 , -5.16878541e+07  , -2.91740427e+07 , -8.54525588e+06 ,  9.88949015e+06 , -1.01838183e+04],
                    [-2.23806234e+03,  -4.51559188e+02,  -1.26811078e+02 ,  3.20338905e+04  ,  1.88438127e+04 ,  1.25851649e+04 , -1.01838183e+04 ,  1.51709659e+04]])
def get_matrix(filename):
    '''

    :param filename: The file contain the matrix
    :return: the Matrix
    '''

    f = open ( str(filename) , 'r')
    l = []
    l = array([line.split(',') for line in f])
    return l


def add_cmb_2(M, prior_fish, matrix, n):
    '''
    This function add the prior matrix to the Matrix

    :param M: convert the parameters of the prior matrix to the parameters we desire
    :param prior_fish: The prior matrix with the initial parameters
    :param matrix: The matrix we would like to add the prior matrix to it
    :param n: the nxn number of the coloumn and raws of the matrices you want to add
    :return: the inverse of Full matrix = inverse of (prior matrix + matrix)
    '''

    #print M
       #======== convert the parameters ============
    MT = M.T
    #print MT
    M11 = dot(M, prior_fish)
    #print M11
    Final_prior_Fisher = dot(M11 , MT)
    #print 'final prior matrix ', Final_prior_Fisher

    #===== Stack new columns and raws===========
    newraw = linspace(0.,0.,n)
    matrix = vstack((matrix,newraw))
    #print 'matrix', matrix
    #matrix = vstack((newraw, matrix))
    newcolumn = linspace(0., 0., n+1)
    #matrix= column_stack((newcolumn, matrix))
    matrix = column_stack(( matrix, newcolumn))
    #print 'matrix after adding columns ', matrix
    matrix_plus_prior = matrix +  Final_prior_Fisher
    #print 'matrix + final prior ',  matrix_plus_prior
    matrix_plus_prior =  linalg.inv(matrix_plus_prior)
    #print matrix_plus_prior
    return matrix_plus_prior

def delete_param(M, prior_fish, matrix, n,m):
    '''
    :param M: convert the parameters of the prior matrix to the parameters we desire
    :param prior_fish: The prior matrix with the initial parameters
    :param matrix: The matrix we would like to add the prior matrix to it
    :param n : length of the matrix
    :param m: number of the coloumn and raw you want to remove
    :return: the new fisher matrix
    '''
    #======== convert the parameters ============
    MT = M.T
    #print MT
    M11 = dot(M, prior_fish)
    #Delete the specified raw

    Final_prior_Fisher = dot(M11 , MT)
    #print 'final prior matrix ', Final_prior_Fisher
    Final_prior_Fisher = delete(Final_prior_Fisher,(m), axis=1)
    Final_prior_Fisher = delete(Final_prior_Fisher,(m), axis=0)
    #===== Stack new columns and raws===========
    newraw = linspace(0.,0.,n)
    matrix = vstack((matrix,newraw))
    #print 'matrix', matrix
    #matrix = vstack((newraw, matrix))
    newcolumn = linspace(0., 0., n+1)
    #matrix= column_stack((newcolumn, matrix))
    matrix = column_stack((matrix, newcolumn))
    #print 'matrix after adding columns ', matrix
    matrix = delete(matrix,(m+1), axis=1)
    matrix=  delete(matrix,(m+1), axis=0)
    matrix_plus_prior = matrix +  Final_prior_Fisher
    matrix_plus_prior =  linalg.inv(matrix_plus_prior)
    return matrix_plus_prior




def FoM(matrix_plus_prior):
    '''
    :param matrix_plus_prior: The fisher matrix that you would like
    find FoM of w and w0 for it,
    :return:FoM
    '''
    #============parameters========================
    w0 = sqrt(matrix_plus_prior[1,1]) #;   print 'sigma_w0 = ', w0
    wa = sqrt(matrix_plus_prior[2,2])   # ; print 'sigma_wa =', wa
    w0a = (matrix_plus_prior[2,1])  #;  print 'sigma w0a = ', w0a
    wa0 =((matrix_plus_prior[1,2]))   #; print' wa0 = ', wa0
    ob0 =sqrt(matrix_plus_prior[3,3])*0.049    #print'sigma_ob0 =', ob0
    ok0 = sqrt((matrix_plus_prior[4,4]))   #print 'sigma_ok0=', ok0
    om0 = sqrt(matrix_plus_prior[5,5])  #print 'sigma_om0 = ', om0
    h = sqrt(matrix_plus_prior[6,6])       #print 'sigma_h = ',  h
    FoM2 =  1.0/sqrt(matrix_plus_prior[1,1] * matrix_plus_prior[2,2]
                     - matrix_plus_prior[1,2]* matrix_plus_prior[2,1])#/(pi*(sqrt(2.31)))
	

    #print 'w_ok =', matrix_plus_prior[1,4]
    print 'w0_Ok = ' , matrix_plus_prior[1,4], 'Okw0 =', matrix_plus_prior[4,1]
    print 'wa0 = ', matrix_plus_prior[1,2], 'w0a =', matrix_plus_prior[2,1]
    print  '&','%.3f' % w0,  '&', '%.3f' % wa,  '&','%.3f' % om0,  '&', '%.3e' % ob0,  '&', '%.3f' % ok0,  '&',  '%.3f'  % h,  '&', '%.0f' % FoM2 , ' \\\ '
    return FoM2




#============================Main progarm ===========================================================================
if __name__== "__main__" :
    ''' using the planck prior from DETF (From File, file:planck_prior.dat), we transform the parameters:
     {n_s, w0, wa, omega_b, omegak, omegaDE, h, sigma8} to our parameters {n_s, w0, wa, omega_b, omegak, omega_cdm, h, sigma8}
	'''
    ob = 0.049
    M = array([[1., 0 , 0., 0., 0.,  0.,  0.,  0.],
               [0., 1., 0., 0., 0.,  0.,  0.,  0.],
               [0., 0., 1., 0., 0.,  0.,  0.,  0.],
               [0., 0., 0., ob,-ob, -ob,  0.,  0.],
               [0., 0., 0., 0., 1.,  0.,  0.,  0.],
               [0., 0., 0.,-ob,-1., -1.,  0.,  0.],
               [0., 0., 0., 0., 0., 0. ,  1.,  0.],
               [0., 0., 0., 0., 0., 0. ,  0.,  1.]])
    test = get_matrix('planck_prior.txt')
    print test
    planck_prior= mat('[0.172276e6  0.490320e5  0.674392e6  -0.208974e7  0.325219e7  -0.790504e7  -0.549427e5 ;  0.490320e5 0.139551e5 0.191940e6  -0.594767e6 0.925615e6 -0.224987e7  -0.156374e5 ; 0.674392e6  0.191940e6 0.263997e7  -0.818048e7 0.127310e8  -0.309450e8  -0.215078e6 ;  -0.208974e7  -0.594767e6  -0.818048e7 0.253489e8  -0.394501e8  0.958892e8 0.666335e6 ;  0.325219e7  0.925615e6  0.127310e8 -0.394501e8  0.633564e8  -0.147973e9 -0.501247e6 ;  -0.790504e7 -0.224987e7  -0.309450e8  0.958892e8 -0.147973e9 0.405079e9 0.219009e7 ;  -0.549427e5  -0.156374e5 -0.215078e6 0.666335e6  -0.501247e6  0.219009e7 0.242767e6]')
    _ska_0uJy = mat('[0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000     ;   0.00000000       371696.41859041591        82613.792474888221        76577.376381075665        516282.01615356567        1562803.6404858839        3270338.8458964801      ;   0.00000000       82613.792474888236        19234.783975878687        18117.348868281591        120685.50782590783        369741.82330827927        729004.65555402322      ;   0.00000000       76577.376381075665        18117.348868281588        17274.846837303961        114000.10818904839        352547.90385906218        681943.69280442584      ;   0.00000000       516282.01615356567        120685.50782590783        114000.10818904839        792598.50531386386        2326532.8810306103        4562425.4224587567      ;   0.00000000       1562803.6404858839        369741.82330827927        352547.90385906218        2326532.8810306108        7194855.3689646618        13917218.584476318      ;   0.00000000       3270338.8458964801        729004.65555402322        681943.69280442584        4562425.4224587567        13917218.584476318        29090474.097362984]')
    _ska_3uJy = mat('[0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000     ;   0.00000000       265451.17093365535        58066.690023146701        52455.136618944518        384022.30079664657        1070513.0202205468        2070883.6775542207      ;   0.00000000       58066.690023146701        13331.550353134744        12216.105871040700        88228.949871763150        249308.28960263755        451774.20893942961      ;   0.00000000       52455.136618944518        12216.105871040700        11312.809086989897        80929.789325942009        230873.66087458082        410917.40846307139      ;   0.00000000       384022.30079664657        88228.949871763150        80929.789325942009        601509.66372675111        1651628.3967857878        2988034.9421473448      ;   0.00000000       1070513.0202205468        249308.28960263755        230873.66087458082        1651628.3967857878        4711707.4880129229        8386069.7797922166      ;   0.00000000       2070883.6775542207        451774.20893942961        410917.40846307139        2988034.9421473448        8386069.7797922166        16317832.952285955]')
    _ska_5uJy = mat('[0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000     ;   0.00000000       169694.02388527690        34923.869647842919        30404.684082315067        244578.83033039598        620503.77301001188        1303541.2104146124      ;   0.00000000       34923.869647842912        7567.0065138026857        6641.1087033173690        52665.677801065816        135532.83422454449        265036.90830120596      ;   0.00000000       30404.684082315067        6641.1087033173699        5865.1379110012058        46204.205472274021        119696.69519168382        231820.00835461047      ;   0.00000000       244578.83033039598        52665.677801065816        46204.205472274014        373608.15503963875        942942.99348276202        1858775.7644806104      ;   0.00000000       620503.77301001188        135532.83422454449        119696.69519168382        942942.99348276202        2442789.7616758905        4731020.7023961805      ;   0.00000000       1303541.2104146124        265036.90830120601        231820.00835461047        1858775.7644806104        4731020.7023961805        10140842.668655617]')
    _ska_23uJy = mat('[0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000     ;   0.00000000       35891.716288115109        5915.6719991651817        4970.8221937848766        48530.847306277486        101445.35354667524        284571.46011719550      ;   0.00000000       5915.6719991651808        1032.1895785718150        857.28549975985879        8271.2765057622601        17495.622901642797        45126.955690263247      ;   0.00000000       4970.8221937848766        857.28549975985879        714.71205652096455        6902.8998678708576        14585.960718630025        38364.154785732055      ;   0.00000000       48530.847306277479        8271.2765057622619        6902.8998678708576        67251.404378503168        140875.51119189395        376073.57141739107      ;   0.00000000       101445.35354667524        17495.622901642790        14585.960718630025        140875.51119189395        297672.67551219428        782941.95487902162      ;   0.00000000       284571.46011719550        45126.955690263247        38364.154785732055        376073.57141739107        782941.95487902162        2335109.7346991245]')
    _ska_70uJy = mat('[0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000     ;   0.00000000       1591.0746809227128        195.18624582935740        177.86516974505395        1949.2959000824694        3629.9015183014744        14726.377166320390      ;   0.00000000       195.18624582935740        24.981493995009458        22.274999729674075        243.28792575146605        454.59184310680519        1721.3640273765261      ;   0.00000000       177.86516974505395        22.274999729674075        20.084851116573070        219.73456839513349        409.89493146639529        1610.1524470652878      ;   0.00000000       1949.2959000824694        243.28792575146608        219.73456839513352        2408.8226760491016        4484.3790641196865        17694.708931433961      ;   0.00000000       3629.9015183014744        454.59184310680524        409.89493146639529        4484.3790641196874        8365.2029017632995        32860.254881136731      ;   0.00000000       14726.377166320390        1721.3640273765263        1610.1524470652878        17694.708931433961        32860.254881136731        144912.57739104895]')
    _ska_100uJy = mat('[0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000     ;   0.00000000       1330.7936012176490        161.52237074120933        147.96154050648067        1630.6206756879014        3019.6233546148492        12417.593907776762      ;   0.00000000       161.52237074120936        20.524741006327076        18.360592996577004        201.50026178909667        374.70598932168730        1430.1837841333836      ;   0.00000000       147.96154050648070        18.360592996577004        16.627888410876231        182.86349811847015        339.34467032135473        1348.2406528347933      ;   0.00000000       1630.6206756879014        201.50026178909670        182.86349811847015        2015.1315298429417        3731.9082224675522        14910.395481498603      ;   0.00000000       3019.6233546148496        374.70598932168718        339.34467032135473        3731.9082224675522        6925.4016162501212        27515.116083579807      ;   0.00000000       12417.593907776762        1430.1837841333836        1348.2406528347933        14910.395481498603        27515.116083579807        123869.88183071888]')
    _ska_200uJy = mat('[0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000     ;   0.00000000       515.94343727956903        56.811387775088484        54.745047912168602        621.50590238614132        1117.2459049779404        5209.9428054537402      ;   0.00000000       56.811387775088484        6.6640176143105485        6.1988730082184080        69.860147397387564        126.50761572118164        533.77812460634163      ;   0.00000000       54.745047912168602        6.1988730082184080        5.8810189901822856        66.541920880746531        120.02079885691677        536.90431054505211      ;   0.00000000       621.50590238614120        69.860147397387564        66.541920880746517        754.49332978601001        1357.9984208371695        6134.7222432492645      ;   0.00000000       1117.2459049779404        126.50761572118164        120.02079885691677        1357.9984208371695        2449.4041223638333        10957.231114015149      ;   0.00000000       5209.9428054537402        533.77812460634163        536.90431054505211        6134.7222432492645        10957.231114015149        57718.620081365210]')
    _euclid = mat('[0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000     ;   0.00000000       86773.057450518128        20089.273988484078        18342.505077007136        130576.25496762570        374336.84809632116        671309.35775477719      ;   0.00000000       20089.273988484074        4813.5838592120499        4463.5039846466761        31673.405067335887        91091.920436346161        156126.13451721668      ;   0.00000000       18342.505077007136        4463.5039846466771        4191.7290616480595        29442.629400459082        85545.493291318315        143739.84030659581      ;   0.00000000       130576.25496762570        31673.405067335894        29442.629400459082        213828.58317380512        600870.00347905909        1012404.0293077956      ;   0.00000000       374336.84809632122        91091.920436346161        85545.493291318315        600870.00347905909        1745826.4393590749        2933466.2054251516      ;   0.00000000       671309.35775477719        156126.13451721668        143739.84030659581        1012404.0293077956        2933466.2054251516        5230381.6248332337]')


    print '-------0uJy (30000)-----------'
    ska_0uJy = add_cmb_2(M, Planks_prior, _ska_0uJy, 7)
    _ska_0uJy_wa_off = delete_param(M, Planks_prior, _ska_0uJy, 7, 1)
    ska_0uJy= FoM(ska_0uJy)
    print '------3 uJy ------------------------'
    ska_3uJy =add_cmb_2(M, Planks_prior,_ska_3uJy, 7)
    _ska_3uJy_wa_off = delete_param(M, Planks_prior, _ska_3uJy, 7, 1)
    ska_3uJy = FoM(ska_3uJy)
    print '------ 5uJy ------------------------'
    ska_5uJy = add_cmb_2(M, Planks_prior, _ska_5uJy, 7)
    ska_5uJy = FoM(ska_5uJy)
    print '------23uJy----------------------- '
    ska_23uJy = add_cmb_2(M, Planks_prior,_ska_23uJy, 7)
    ska_23uJy = FoM(ska_23uJy)
    print '-------Euclid -----------------------'
    euclid = add_cmb_2(M, Planks_prior, _euclid, 7)
    Euclid = FoM(euclid)
    print '------70uJy------------------------'
    ska_70uJy = add_cmb_2(M, Planks_prior, _ska_70uJy, 7)
    ska_70uJy = FoM(ska_70uJy)
    print '----- 100 uJy --------------------- '
    ska_100uJy = add_cmb_2(M, Planks_prior, _ska_100uJy,7)
    ska_100uJy = FoM(ska_100uJy)
    print '----- 200 uJy ---------------------'
    ska_200uJy = add_cmb_2(M, Planks_prior,_ska_200uJy, 7)
    ska_200uJy = FoM(ska_200uJy)

