from scipy import *
from numpy import *
from scipy import linalg

#==================Plank's prior matrix  from DETF=====================================================================
Planks_prior = array([[1.99579245e+05,  -3.73667528e+04, -1.04936812e+04 ,  1.39977603e+06  ,  5.58643962e+05 , -4.64225267e+04 , -7.65181989e+04 , -2.23806234e+03],
                    [-3.73667528e+04,   1.83928663e+05,   5.16525685e+04 , -7.42050738e+06  , -3.98758357e+06 , -1.11710442e+06 ,  1.32438370e+06 , -4.51559188e+02],
                    [-1.04936812e+04,   5.16525685e+04,   1.45055577e+04 , -2.08389634e+06  , -1.11983054e+06 , -3.13715719e+05 ,  3.71925825e+05 , -1.26811078e+02],
                    [1.39977603e+06,  -7.42050738e+06 ,  -2.08389634e+06 ,  3.64943809e+08  ,  1.58599621e+08 ,  4.25932543e+07 , -5.16878541e+07 ,  3.20338905e+04],
                    [5.58643962e+05,  -3.98758357e+06 ,  -1.11983054e+06 ,  1.58599621e+08  ,  8.70535526e+07 ,  2.48738854e+07 , -2.91740427e+07 ,  1.88438127e+04],
                    [-4.64225267e+04,  -1.11710442e+06,  -3.13715719e+05 ,  4.25932543e+07  ,  2.48738854e+07 ,  7.49686718e+06 , -8.54525588e+06 ,  1.25851649e+04],
                    [-7.65181989e+04,   1.32438370e+06,   3.71925825e+05 , -5.16878541e+07  , -2.91740427e+07 , -8.54525588e+06 ,  9.88949015e+06 , -1.01838183e+04],
                    [-2.23806234e+03,  -4.51559188e+02,  -1.26811078e+02 ,  3.20338905e+04  ,  1.88438127e+04 ,  1.25851649e+04 , -1.01838183e+04 ,  1.51709659e+04]])
def get_matrix(filename):
    '''

    :param filename: The file contain the matrix
    :return: the Matrix
    '''

    f = open ( str(filename) , 'r')
    l = []
    l = array([line.split(',') for line in f])
    return l


def add_cmb_2(M, prior_fish, matrix, n):
    '''
    This function add the prior matrix to the Matrix

    :param M: convert the parameters of the prior matrix to the parameters we desire
    :param prior_fish: The prior matrix with the initial parameters
    :param matrix: The matrix we would like to add the prior matrix to it
    :param n: the nxn number of the coloumn and raws of the matrices you want to add
    :return: the inverse of Full matrix = inverse of (prior matrix + matrix)
    '''

    #print M
       #======== convert the parameters ============
    MT = M.T
    #print MT
    M11 = dot(M, prior_fish)
    #print M11
    Final_prior_Fisher = dot(M11 , MT)
    #print 'final prior matrix ', Final_prior_Fisher

    #===== Stack new columns and raws===========
    newraw = linspace(0.,0.,n)
    matrix = vstack((matrix,newraw))
    #print 'matrix', matrix
    #matrix = vstack((newraw, matrix))
    newcolumn = linspace(0., 0., n+1)
    #matrix= column_stack((newcolumn, matrix))
    matrix = column_stack(( matrix, newcolumn))
    #print 'matrix after adding columns ', matrix
    matrix_plus_prior = matrix +  Final_prior_Fisher
    #print 'matrix + final prior ',  matrix_plus_prior
    matrix_plus_prior =  linalg.inv(matrix_plus_prior)
    #print matrix_plus_prior
    return matrix_plus_prior

def delete_param(M, prior_fish, matrix, n,m):
    '''
    :param M: convert the parameters of the prior matrix to the parameters we desire
    :param prior_fish: The prior matrix with the initial parameters
    :param matrix: The matrix we would like to add the prior matrix to it
    :param n : length of the matrix
    :param m: number of the coloumn and raw you want to remove
    :return: the new fisher matrix
    '''
    #======== convert the parameters ============
    MT = M.T
    #print MT
    M11 = dot(M, prior_fish)
    #Delete the specified raw

    Final_prior_Fisher = dot(M11 , MT)
    #print 'final prior matrix ', Final_prior_Fisher
    Final_prior_Fisher = delete(Final_prior_Fisher,(m), axis=1)
    Final_prior_Fisher = delete(Final_prior_Fisher,(m), axis=0)
    #===== Stack new columns and raws===========
    newraw = linspace(0.,0.,n)
    matrix = vstack((matrix,newraw))
    #print 'matrix', matrix
    #matrix = vstack((newraw, matrix))
    newcolumn = linspace(0., 0., n+1)
    #matrix= column_stack((newcolumn, matrix))
    matrix = column_stack((matrix, newcolumn))
    #print 'matrix after adding columns ', matrix
    matrix = delete(matrix,(m+1), axis=1)
    matrix=  delete(matrix,(m+1), axis=0)
    matrix_plus_prior = matrix +  Final_prior_Fisher
    matrix_plus_prior =  linalg.inv(matrix_plus_prior)
    return matrix_plus_prior




def FoM(matrix_plus_prior):
    '''
    :param matrix_plus_prior: The fisher matrix that you would like
    find FoM of w and w0 for it,
    :return:FoM
    '''
    #============parameters========================
    w0 = sqrt(matrix_plus_prior[1,1]) ;   print 'sigma_w0 = ', w0
    ob0 =sqrt(matrix_plus_prior[2,2])*0.049    #print'sigma_ob0 =', ob0
    ok0 = sqrt((matrix_plus_prior[3,3])) ;  print 'sigma_ok0=', ok0
    om0 = sqrt(matrix_plus_prior[4,4])  #print 'sigma_om0 = ', om0
    h = sqrt(matrix_plus_prior[5,5])       #print 'sigma_h = ',  h
    #FoM2 =  1.0/sqrt(matrix_plus_prior[1,1] * matrix_plus_prior[2,2]
    #                 - matrix_plus_prior[1,2]* matrix_plus_prior[2,1])#/(pi*(sqrt(2.31)))
	

    #print 'w_ok =', matrix_plus_prior[1,4]
    print 'w0ok0 = ', matrix_plus_prior[1,3], 'w0ok0 =', matrix_plus_prior[3,1]
    #print  '&','%.7f' % w0,  '&','%.3f' % om0,  '&', '%.3e' % ob0,  '&', '%.5f' % ok0,  '&',  '%.5f'  % h ,  ' \\\ '
    return




#============================Main progarm ===========================================================================
if __name__== "__main__" :
    ''' using the planck prior from DETF (From File, file:planck_prior.dat), we transform the parameters:
     {n_s, w0, wa, omega_b, omegak, omegaDE, h, sigma8} to our parameters {n_s, w0, wa, omega_b, omegak, omega_cdm, h, sigma8}
	'''
    ob = 0.049
    M = array([[1., 0 , 0., 0., 0.,  0.,  0.,  0.],
               [0., 1., 0., 0., 0.,  0.,  0.,  0.],
               [0., 0., 1., 0., 0.,  0.,  0.,  0.],
               [0., 0., 0., ob,-ob, -ob,  0.,  0.],
               [0., 0., 0., 0., 1.,  0.,  0.,  0.],
               [0., 0., 0.,-ob,-1., -1.,  0.,  0.],
               [0., 0., 0., 0., 0., 0. ,  1.,  0.],
               [0., 0., 0., 0., 0., 0. ,  0.,  1.]])
    test = get_matrix('planck_prior.txt')
    print test
    planck_prior= mat('[0.172276e6  0.490320e5  0.674392e6  -0.208974e7  0.325219e7  -0.790504e7  -0.549427e5 ;  0.490320e5 0.139551e5 0.191940e6  -0.594767e6 0.925615e6 -0.224987e7  -0.156374e5 ; 0.674392e6  0.191940e6 0.263997e7  -0.818048e7 0.127310e8  -0.309450e8  -0.215078e6 ;  -0.208974e7  -0.594767e6  -0.818048e7 0.253489e8  -0.394501e8  0.958892e8 0.666335e6 ;  0.325219e7  0.925615e6  0.127310e8 -0.394501e8  0.633564e8  -0.147973e9 -0.501247e6 ;  -0.790504e7 -0.224987e7  -0.309450e8  0.958892e8 -0.147973e9 0.405079e9 0.219009e7 ;  -0.549427e5  -0.156374e5 -0.215078e6 0.666335e6  -0.501247e6  0.219009e7 0.242767e6]')
    _ska_0uJy = mat('[0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000     ;   0.00000000       371696.41859041591        82613.792474888221        76577.376381075665        516282.01615356567        1562803.6404858839        3270338.8458964801      ;   0.00000000       82613.792474888236        19234.783975878687        18117.348868281591        120685.50782590783        369741.82330827927        729004.65555402322      ;   0.00000000       76577.376381075665        18117.348868281588        17274.846837303961        114000.10818904839        352547.90385906218        681943.69280442584      ;   0.00000000       516282.01615356567        120685.50782590783        114000.10818904839        792598.50531386386        2326532.8810306103        4562425.4224587567      ;   0.00000000       1562803.6404858839        369741.82330827927        352547.90385906218        2326532.8810306108        7194855.3689646618        13917218.584476318      ;   0.00000000       3270338.8458964801        729004.65555402322        681943.69280442584        4562425.4224587567        13917218.584476318        29090474.097362984]')
    _ska_3uJy = mat('[0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000     ;   0.00000000       289108.43315710285        62928.618750478214        57474.544590548438        406357.12903090910        1172949.9202792572        2521309.3709933362      ;   0.00000000       62928.618750478199        14399.702022524742        13350.084961779379        92973.635452972710        272450.72063112125        548761.47703190090      ;   0.00000000       57474.544590548438        13350.084961779379        12520.758096894209        86309.417363739209        255525.68212959875        505563.57893584360      ;   0.00000000       406357.12903090921        92973.635452972710        86309.417363739209        624190.65491364419        1761416.7269590718        3547179.9488673559      ;   0.00000000       1172949.9202792575        272450.72063112119        255525.68212959875        1761416.7269590718        5214809.9757627975        10317624.329752609      ;   0.00000000       2521309.3709933362        548761.47703190090        505563.57893584360        3547179.9488673559        10317624.329752609        22253679.508053415]')
    _ska_7uJy = mat('[0.           0.           0.           0.           0.           0.           0. ;           0.    123772.12427680619        23900.506089165126        20504.966170207954        174399.70212887024        418468.70829541929        1051868.7726502474      ;           0   23900.506089165126        4891.8490372166261        4207.2962892121941        35197.513855943966        85863.191821344095        199096.22276173200      ;           0.   20504.966170207954        4207.2962892121941        3634.9682726567548        30277.253545733736        74183.027912699908        171841.44798710538      ;           0.   174399.70212887024        35197.513855943966        30277.253545733736        257901.29500357146        617903.14974646026        1461053.2274159100      ;           0.   418468.70829541929        85863.191821344095        74183.027912699908        617903.14974646037        1513939.3847512845        3506968.4179854053      ;           0.   1051868.7726502477        199096.22276173200        171841.44798710535        1461053.2274159100        3506968.4179854053        9121629.2967789322]')
    _ska_23uJy = mat('[0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000     ;   0.00000000       41423.703180449156        6884.3258765567698        5826.0624607616901        55917.993394770521        118899.23700267437        361608.60310642462      ;   0.00000000       6884.3258765567698        1221.2434187297749        1021.4945703684864        9642.9249742771626        20846.828511912121        57666.220172426729      ;   0.00000000       5826.0624607616901        1021.4945703684864        858.17442620248335        8108.3611202786324        17513.764258089181        49450.580038943219      ;   0.00000000       55917.993394770521        9642.9249742771644        8108.3611202786324        77625.596016779848        165476.76188443028        477216.18013783894      ;   0.00000000       118899.23700267437        20846.828511912117        17513.764258089181        165476.76188443028        357423.76971689163        1009195.5373923911      ;   0.00000000       361608.60310642462        57666.220172426729        49450.580038943219        477216.18013783894        1009195.5373923911        3290653.8486173581]')
    _ska_70uJy = mat('[0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000     ;   0.00000000       1268.0806114634809        153.29082286678025        141.36747345652680        1561.4878538741029        2885.0505541575244        12983.293395831686      ;   0.00000000       153.29082286678025        19.829622201464481        17.688161695238925        193.51422082291188        360.98290118037681        1464.5910360692812      ;   0.00000000       141.36747345652680        17.688161695238925        16.041192911957076        176.27627159974952        327.37129247925185        1402.2053711100323      ;   0.00000000       1561.4878538741029        193.51422082291188        176.27627159974952        1943.4543557554216        3597.4750246921089        15602.533941139089      ;   0.00000000       2885.0505541575244        360.98290118037681        327.37129247925185        3597.4750246921089        6681.0469600206679        28616.436893510054      ;   0.00000000       12983.293395831684        1464.5910360692812        1402.2053711100323        15602.533941139087        28616.436893510054        144317.26422587756]')
    _ska_100uJy = mat('[0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000     ;   0.00000000       589.15921827235002        62.843281227943123        61.690870635865288        704.60396760944400        1258.9973928422507        6586.2816941632027      ;   0.00000000       62.843281227943123        7.1978250981288632        6.7861467675221858        76.833244383822674        138.49279479593230        649.33203765898804      ;   0.00000000       61.690870635865288        6.7861467675221858        6.5465353372168327        74.477935617471459        133.60276547813791        668.75914332402078      ;   0.00000000       704.60396760944400        76.833244383822674        74.477935617471459        849.29865079708543        1519.9579094958631        7695.6182401917749      ;   0.00000000       1258.9973928422505        138.49279479593230        133.60276547813791        1519.9579094958631        2726.5871218828352        13648.146139063638      ;   0.00000000       6586.2816941632027        649.33203765898804        668.75914332402078        7695.6182401917749        13648.146139063638        81182.596403609583]')
    _ska_200uJy = mat('[0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000     ;   0.00000000       183.49820050143217        16.102756898411776        17.771807882275741        211.17639031997282        362.68996626658947        2394.2557246579668      ;   0.00000000       16.102756898411776        1.5288722962683261        1.6020659801934740        18.886450295033072        32.695224940661234        191.32861418448613      ;   0.00000000       17.771807882275741        1.6020659801934740        1.7369721943230070        20.582871240149498        35.448413056125375        225.31481366751794      ;   0.00000000       211.17639031997285        18.886450295033075        20.582871240149498        244.26973475911754        420.05860772356226        2697.3341935729791      ;   0.00000000       362.68996626658947        32.695224940661234        35.448413056125389        420.05860772356220        723.43702006550654        4598.2616236773383      ;   0.00000000       2394.2557246579668        191.32861418448618        225.31481366751794        2697.3341935729786        4598.2616236773383        35178.562152818282]')
    _euclid = mat('[0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000     ;   0.00000000       70523.108110170651        16161.455596150634        14735.243613853401        104710.91350495878        300719.26529030816        605228.35341195390      ;   0.00000000       16161.455596150634        3835.3339278606236        3550.3675130017082        25162.645098454006        72456.481752136315        139535.27848382379      ;   0.00000000       14735.243613853401        3550.3675130017082        3327.5666470887600        23345.374865239966        67909.525186016486        128362.94141359370      ;   0.00000000       104710.91350495879        25162.645098454002        23345.374865239966        169499.27916645433        476436.23419985588        902312.94063174562      ;   0.00000000       300719.26529030810        72456.481752136315        67909.525186016486        476436.23419985588        1385908.7135113943        2619651.9340954553      ;   0.00000000       605228.35341195390        139535.27848382379        128362.94141359370        902312.94063174562        2619651.9340954553        5233345.3583936309]')


    print '-------0uJy (30000)-----------'
    ska_0uJy = add_cmb_2(M, Planks_prior, _ska_0uJy, 7)
    _ska_0uJy_wa_off = delete_param(M, Planks_prior, _ska_0uJy, 7, 1)
    ska_0uJy= FoM(_ska_0uJy_wa_off)
    print '------3 uJy ------------------------'
    ska_3uJy =add_cmb_2(M, Planks_prior,_ska_3uJy, 7)
    _ska_3uJy_wa_off = delete_param(M, Planks_prior, _ska_3uJy, 7, 1)
    ska_3uJy = FoM(_ska_3uJy_wa_off)
    print '------ 7uJy ------------------------'
    ska_7uJy = add_cmb_2(M, Planks_prior, _ska_7uJy, 7)
    ska_7uJy = FoM(ska_7uJy)
    print '------23uJy----------------------- '
    ska_23uJy = add_cmb_2(M, Planks_prior,_ska_23uJy, 7)
    ska_23uJy = FoM(ska_23uJy)
    print '-------Euclid -----------------------'
    euclid = add_cmb_2(M, Planks_prior, _euclid, 7)
    Euclid = FoM(euclid)
    print '------70uJy------------------------'
    ska_70uJy = add_cmb_2(M, Planks_prior, _ska_70uJy, 7)
    ska_70uJy = FoM(ska_70uJy)
    print '----- 100 uJy --------------------- '
    ska_100uJy = add_cmb_2(M, Planks_prior, _ska_100uJy,7)
    ska_100uJy = FoM(ska_100uJy)
    print '----- 200 uJy ---------------------'
    ska_200uJy = add_cmb_2(M, Planks_prior,_ska_200uJy, 7)
    ska_200uJy = FoM(ska_200uJy)

